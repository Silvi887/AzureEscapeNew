// <auto-generated />
using System;
using AzureAdd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AzureAdd.Data.Migrations
{
    [DbContext(typeof(AzureAddDbContext))]
    [Migration("20250806144811_AzureEscapeMigration1")]
    partial class AzureEscapeMigration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AzureAdd.DataModels.Amenity", b =>
                {
                    b.Property<int>("IdAmenity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAmenity"));

                    b.Property<string>("NameAmenity")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdAmenity");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("AzureAdd.DataModels.Booking", b =>
                {
                    b.Property<int>("IdBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBooking"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdultsCount")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumberOfPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.HasKey("IdBooking");

                    b.HasIndex("GuestId");

                    b.HasIndex("VillaId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AzureAdd.DataModels.FeedBack", b =>
                {
                    b.Property<int>("IdFeedBack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFeedBack"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackMessage")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("GuestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.HasKey("IdFeedBack");

                    b.HasIndex("BookingId");

                    b.HasIndex("GuestId");

                    b.HasIndex("VillaId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("AzureAdd.DataModels.Location", b =>
                {
                    b.Property<int>("IdLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLocation"));

                    b.Property<string>("NameLocation")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdLocation");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            IdLocation = 1,
                            NameLocation = "Sunny Beach"
                        },
                        new
                        {
                            IdLocation = 2,
                            NameLocation = "Golden Sands"
                        },
                        new
                        {
                            IdLocation = 3,
                            NameLocation = "Sozopol"
                        });
                });

            modelBuilder.Entity("AzureAdd.DataModels.TypePlace", b =>
                {
                    b.Property<int>("IdTypePlace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypePlace"));

                    b.Property<string>("NamePlace")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdTypePlace");

                    b.ToTable("TypePlaces");

                    b.HasData(
                        new
                        {
                            IdTypePlace = 1,
                            NamePlace = "vila"
                        },
                        new
                        {
                            IdTypePlace = 2,
                            NamePlace = "penthhouse"
                        },
                        new
                        {
                            IdTypePlace = 3,
                            NamePlace = "apartment"
                        });
                });

            modelBuilder.Entity("AzureAdd.DataModels.UserVilla", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "VillaId");

                    b.HasIndex("VillaId");

                    b.ToTable("UserVilla");
                });

            modelBuilder.Entity("AzureAdd.DataModels.VillaPenthhouse", b =>
                {
                    b.Property<int>("IdVilla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVilla"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("CountAdults")
                        .HasColumnType("int");

                    b.Property<int>("CountChildren")
                        .HasColumnType("int");

                    b.Property<int>("CountRooms")
                        .HasColumnType("int");

                    b.Property<string>("IDManager")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdPlace")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("NameVilla")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parking")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("VillaAddress")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("VillaInfo")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("IdVilla");

                    b.HasIndex("IDManager");

                    b.HasIndex("IdPlace");

                    b.HasIndex("LocationId");

                    b.ToTable("VillasPenthhouses");

                    b.HasData(
                        new
                        {
                            IdVilla = 1,
                            Area = "200m2",
                            Bathrooms = 4,
                            Bedrooms = 3,
                            CountAdults = 2,
                            CountChildren = 3,
                            CountRooms = 4,
                            IDManager = "7699db7d-964f-4782-8209-d76562e0fece",
                            IdPlace = 1,
                            ImageUrl = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/2a/44/d7/42/sol-nessebar-palace-all.jpg?w=900&h=500&s=1",
                            IsDeleted = false,
                            LocationId = 2,
                            NameVilla = "Villa Rio",
                            Parking = "Yes",
                            VillaAddress = "New str 17",
                            VillaInfo = "This is Fantastic Place for relax and enjoy!"
                        },
                        new
                        {
                            IdVilla = 2,
                            Area = "400m2",
                            Bathrooms = 4,
                            Bedrooms = 3,
                            CountAdults = 4,
                            CountChildren = 2,
                            CountRooms = 4,
                            IDManager = "7699db7d-964f-4782-8209-d76562e0fece",
                            IdPlace = 3,
                            ImageUrl = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/2f/ab/45/e6/caption.jpg?w=900&h=500&s=1",
                            IsDeleted = false,
                            LocationId = 2,
                            NameVilla = "Relax",
                            Parking = "Yes",
                            VillaAddress = "Balcan str 25",
                            VillaInfo = "This is Fantastic Place for relax and enjoy!"
                        },
                        new
                        {
                            IdVilla = 3,
                            Area = "500m2",
                            Bathrooms = 4,
                            Bedrooms = 3,
                            CountAdults = 2,
                            CountChildren = 2,
                            CountRooms = 6,
                            IDManager = "7699db7d-964f-4782-8209-d76562e0fece",
                            IdPlace = 2,
                            ImageUrl = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/18/46/67/88/cook-s-club-sunny-beach.jpg?w=900&h=500&s=1",
                            IsDeleted = false,
                            LocationId = 2,
                            NameVilla = "Aphrodita",
                            Parking = "Yes",
                            VillaAddress = "New str 15",
                            VillaInfo = "This is Fantastic Place for relax and enjoy!"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7699db7d-964f-4782-8209-d76562e0fece",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98776ada-0b2c-40ac-8d2b-c18b911c389a",
                            Email = "admin@horizons.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HORIZONS.COM",
                            NormalizedUserName = "ADMIN@HORIZONS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKNZ0JwEsm4tibh9x2ToUx4x6AOR1HYox94YM6yHW1DosUKtS7mDWxMMaOKyj+UiSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce4f3b9d-6618-46be-81b7-0005db1418f0",
                            TwoFactorEnabled = false,
                            UserName = "admin@horizons.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AzureAdd.DataModels.Booking", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AzureAdd.DataModels.VillaPenthhouse", "VillaPenthhouse")
                        .WithMany("AllBookings")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("VillaPenthhouse");
                });

            modelBuilder.Entity("AzureAdd.DataModels.FeedBack", b =>
                {
                    b.HasOne("AzureAdd.DataModels.Booking", "Booking")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AzureAdd.DataModels.VillaPenthhouse", "Villa")
                        .WithMany("Feedbacks")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Guest");

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("AzureAdd.DataModels.UserVilla", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AzureAdd.DataModels.VillaPenthhouse", "Villa")
                        .WithMany("UserVillas")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("AzureAdd.DataModels.VillaPenthhouse", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("IDManager")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AzureAdd.DataModels.TypePlace", "TypePlace")
                        .WithMany("VillasPenthhouses")
                        .HasForeignKey("IdPlace")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AzureAdd.DataModels.Location", "Location")
                        .WithMany("VillasPenthhouses")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Manager");

                    b.Navigation("TypePlace");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AzureAdd.DataModels.Booking", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("AzureAdd.DataModels.Location", b =>
                {
                    b.Navigation("VillasPenthhouses");
                });

            modelBuilder.Entity("AzureAdd.DataModels.TypePlace", b =>
                {
                    b.Navigation("VillasPenthhouses");
                });

            modelBuilder.Entity("AzureAdd.DataModels.VillaPenthhouse", b =>
                {
                    b.Navigation("AllBookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("UserVillas");
                });
#pragma warning restore 612, 618
        }
    }
}
